using System;
using System.Collections.Generic;
using System.Diagnostics;
using static AnimeStudio.CryptoHelper;

namespace AnimeStudio
{
    internal static class BlbKeys
    {
        // AES
        public static readonly byte[] BlbAESSBox = new byte[256] { 0x63, 0x7d, 0x75, 0x78, 0xf6, 0x6e, 0x69, 0xc2, 0x38, 0x08, 0x6d, 0x20, 0xf2, 0xda, 0xa5, 0x79, 0xda, 0x93, 0xdb, 0x6e, 0xee, 0x4c, 0x51, 0xe7, 0xb5, 0xcd, 0xb8, 0xb4, 0x80, 0xb9, 0x6c, 0xdf, 0x97, 0xdc, 0xb1, 0x05, 0x12, 0x1a, 0xd1, 0xeb, 0x1c, 0x8c, 0xcf, 0xda, 0x5d, 0xf5, 0x1f, 0x3a, 0x34, 0xf6, 0x11, 0xf0, 0x2c, 0xa3, 0x33, 0xad, 0x3f, 0x2b, 0xba, 0xd9, 0xd7, 0x1a, 0x8c, 0x4a, 0x49, 0xc2, 0x6e, 0x59, 0x5f, 0x2b, 0x1c, 0xe7, 0x1a, 0x72, 0x9c, 0xf8, 0x65, 0xae, 0x61, 0xcb, 0x03, 0x80, 0x52, 0xbe, 0x74, 0xa9, 0xe7, 0x0c, 0x32, 0x92, 0xe4, 0x62, 0x16, 0x11, 0x06, 0x90, 0xb0, 0x8e, 0xc8, 0x98, 0x27, 0x28, 0x55, 0xe2, 0x2d, 0x90, 0x68, 0x14, 0x3c, 0x51, 0xf1, 0xc7, 0x21, 0xd2, 0x32, 0xfc, 0xe6, 0xe8, 0x4e, 0x82, 0xc4, 0xcf, 0xa0, 0x5a, 0x6c, 0x82, 0x8d, 0xad, 0x4d, 0x8d, 0x91, 0x6f, 0xdb, 0x12, 0xc2, 0x90, 0x4c, 0x2e, 0xf4, 0xb6, 0xe8, 0xd0, 0x97, 0xfc, 0xf0, 0x10, 0xdd, 0x4f, 0xb6, 0xbf, 0x06, 0x1f, 0xde, 0x77, 0x22, 0x8f, 0x42, 0xc3, 0x95, 0x44, 0x40, 0x93, 0x98, 0xa9, 0xed, 0xa3, 0x82, 0xfb, 0x6a, 0x7a, 0x06, 0xc9, 0x3d, 0x38, 0x4a, 0xd6, 0x57, 0x79, 0x85, 0xde, 0x39, 0x60, 0xf8, 0x1e, 0xd4, 0xef, 0x4e, 0x51, 0xd9, 0xc7, 0x10, 0xb7, 0x7a, 0xb9, 0xe7, 0xed, 0xd8, 0x63, 0x72, 0x01, 0x20, 0x14, 0xbe, 0xd4, 0x87, 0x70, 0x45, 0x45, 0xa0, 0xef, 0x67, 0xb5, 0x9c, 0xd6, 0x20, 0xd9, 0xb9, 0xec, 0x8d, 0x62, 0x5a, 0x1c, 0xc3, 0x41, 0x01, 0x19, 0x7a, 0xf2, 0x8d, 0x3c, 0x68, 0x73, 0x73, 0xf7, 0x6d, 0x02, 0x22, 0xb8, 0xc6, 0x30, 0x7c, 0x50, 0x7b, 0xfe, 0x4b, 0x13, 0xb4, 0x9f, 0xb9, 0x60, 0xd7, 0xf4, 0x4c, 0xa9, 0x45, 0xe9 };
        public static readonly byte[] BlbAESShift = new byte[16] { 0x0, 0x4, 0x8, 0xc, 0x1, 0x5, 0x9, 0xd, 0x2, 0x6, 0xa, 0xe, 0x3, 0x7, 0xb, 0xf };

        // RC4
        public static readonly byte[] BlbRC4Key = new byte[256] { 0x29, 0x23, 0xbe, 0x84, 0xe1, 0x6c, 0xd6, 0xae, 0x52, 0x90, 0x49, 0xf1, 0xf1, 0xbb, 0xe9, 0xeb, 0xb3, 0xa6, 0xdb, 0x3c, 0x87, 0x0c, 0x3e, 0x99, 0x24, 0x5e, 0x0d, 0x1c, 0x06, 0xb7, 0x47, 0xde, 0xb3, 0x12, 0x4d, 0xc8, 0x43, 0xbb, 0x8b, 0xa6, 0x1f, 0x03, 0x5a, 0x7d, 0x09, 0x38, 0x25, 0x1f, 0x5d, 0xd4, 0xcb, 0xfc, 0x96, 0xf5, 0x45, 0x3b, 0x13, 0x0d, 0x89, 0x0a, 0x1c, 0xdb, 0xae, 0x32, 0x20, 0x9a, 0x50, 0xee, 0x40, 0x78, 0x36, 0xfd, 0x12, 0x49, 0x32, 0xf6, 0x9e, 0x7d, 0x49, 0xdc, 0xad, 0x4f, 0x14, 0xf2, 0x44, 0x40, 0x66, 0xd0, 0x6b, 0xc4, 0x30, 0xb7, 0x32, 0x3b, 0xa1, 0x22, 0xf6, 0x22, 0x91, 0x9d, 0xe1, 0x8b, 0x1f, 0xda, 0xb0, 0xca, 0x99, 0x02, 0xb9, 0x72, 0x9d, 0x49, 0x2c, 0x80, 0x7e, 0xc5, 0x99, 0xd5, 0xe9, 0x80, 0xb2, 0xea, 0xc9, 0xcc, 0x53, 0xbf, 0x67, 0xd6, 0xbf, 0x14, 0xd6, 0x7e, 0x2d, 0xdc, 0x8e, 0x66, 0x83, 0xef, 0x57, 0x49, 0x61, 0xff, 0x69, 0x8f, 0x61, 0xcd, 0xd1, 0x1e, 0x9d, 0x9c, 0x16, 0x72, 0x72, 0xe6, 0x1d, 0xf0, 0x84, 0x4f, 0x4a, 0x77, 0x02, 0xd7, 0xe8, 0x39, 0x2c, 0x53, 0xcb, 0xc9, 0x12, 0x1e, 0x33, 0x74, 0x9e, 0x0c, 0xf4, 0xd5, 0xd4, 0x9f, 0xd4, 0xa4, 0x59, 0x7e, 0x35, 0xcf, 0x32, 0x22, 0xf4, 0xcc, 0xcf, 0xd3, 0x90, 0x2d, 0x48, 0xd3, 0x8f, 0x75, 0xe6, 0xd9, 0x1d, 0x2a, 0xe5, 0xc0, 0xf7, 0x2b, 0x78, 0x81, 0x87, 0x44, 0x0e, 0x5f, 0x50, 0x00, 0xd4, 0x61, 0x8d, 0xbe, 0x7b, 0x05, 0x15, 0x07, 0x3b, 0x33, 0x82, 0x1f, 0x18, 0x70, 0x92, 0xda, 0x64, 0x54, 0xce, 0xb1, 0x85, 0x3e, 0x69, 0x15, 0xf8, 0x46, 0x6a, 0x04, 0x96, 0x73, 0x0e, 0xd9, 0x16, 0x2f, 0x67, 0x68, 0xd4, 0xf7, 0x4a, 0x4a, 0xd0, 0x57, 0x68, 0x76 };

        // Descramble
        public static readonly byte[] BlbSBox = new byte[1024] { 0xD0, 0x20, 0x41, 0x4A, 0xA2, 0x7A, 0xCE, 0x66, 0x21, 0x7C, 0x8E, 0x45, 0xF4, 0x87, 0x31, 0xDD, 0xD8, 0x35, 0xC2, 0x09, 0xEA, 0x60, 0x38, 0xD2, 0xB4, 0xBE, 0x10, 0x76, 0x7F, 0xB7, 0x0F, 0xFD, 0xCB, 0x02, 0x0E, 0x5B, 0x2E, 0x9B, 0xB1, 0xE1, 0xF5, 0x5E, 0x40, 0x4D, 0x88, 0x98, 0x6F, 0x37, 0xAB, 0xEE, 0x53, 0x79, 0x70, 0x24, 0x6C, 0x67, 0xE6, 0x3C, 0x49, 0x06, 0x59, 0xBA, 0xCF, 0x08, 0x8A, 0xAC, 0xA0, 0x8B, 0x3D, 0xBF, 0x13, 0x73, 0x43, 0x91, 0x00, 0x2B, 0xA1, 0x22, 0x93, 0x3A, 0xCC, 0x4C, 0x44, 0x14, 0x28, 0xF7, 0xED, 0x36, 0x4F, 0xE4, 0xFC, 0x90, 0x0A, 0x9E, 0xD6, 0x77, 0x05, 0xBD, 0x57, 0x3F, 0x96, 0x5F, 0x4B, 0xBC, 0x8D, 0x3E, 0x72, 0xFE, 0x4E, 0xA7, 0xC3, 0xA9, 0x3B, 0x07, 0x89, 0x2F, 0xB8, 0xFF, 0x1D, 0xB6, 0x65, 0x6D, 0xC4, 0x61, 0x39, 0x6A, 0xA3, 0x64, 0xC1, 0xAE, 0xB2, 0x97, 0x29, 0x9F, 0xF2, 0x32, 0x34, 0x1A, 0x58, 0x27, 0x51, 0x71, 0x15, 0x03, 0xEC, 0x47, 0x1E, 0x5C, 0xB3, 0x18, 0x7D, 0xE9, 0x48, 0x6E, 0x55, 0x19, 0x2A, 0xDA, 0x25, 0x80, 0x11, 0xF1, 0x95, 0xE5, 0xE2, 0x83, 0xA5, 0x82, 0x1C, 0x5A, 0xCD, 0xD4, 0x74, 0x9D, 0x33, 0xB5, 0xD5, 0xCA, 0x16, 0xE3, 0x23, 0x84, 0x2C, 0xDE, 0x1B, 0x94, 0xE8, 0x52, 0x01, 0x12, 0x7B, 0x63, 0x50, 0x9A, 0x68, 0xF6, 0xD7, 0x8C, 0x62, 0xE0, 0x17, 0xDB, 0x8F, 0x0C, 0xC0, 0x0D, 0x46, 0xDF, 0xF8, 0x04, 0xEB, 0x75, 0xA6, 0xD1, 0xA4, 0xFB, 0x5D, 0xC8, 0x1F, 0xF3, 0xDC, 0xB0, 0x78, 0xAA, 0x2D, 0xC9, 0x56, 0x9C, 0x86, 0xF9, 0xC6, 0xE7, 0x81, 0x92, 0xA8, 0xEF, 0x54, 0x6B, 0x7E, 0x99, 0xC5, 0xD9, 0xC7, 0xFA, 0xD3, 0x26, 0x30, 0xB9, 0xF0, 0x0B, 0x42, 0xAD, 0x85, 0x69, 0xBB, 0xAF, 0x0B, 0xE2, 0xC2, 0x29, 0xFF, 0xDD, 0xE6, 0x2A, 0xD9, 0x97, 0x30, 0x5E, 0x73, 0x95, 0x48, 0x05, 0x56, 0x26, 0x0F, 0xD2, 0xA2, 0x9A, 0x3C, 0xAE, 0x14, 0xBD, 0xF9, 0x92, 0x23, 0x61, 0x74, 0x31, 0xE1, 0xC3, 0x7A, 0xE5, 0xF0, 0x8A, 0x32, 0xAA, 0x91, 0x1B, 0x79, 0xE7, 0x54, 0x0C, 0x81, 0xD0, 0xD5, 0x08, 0x0E, 0x98, 0x9F, 0x6C, 0xBF, 0xAC, 0x59, 0xED, 0x18, 0x87, 0xDC, 0x85, 0x69, 0xF6, 0x82, 0x01, 0xA7, 0x83, 0x20, 0xD7, 0x10, 0xB9, 0x21, 0x1E, 0x42, 0xD8, 0xB1, 0x4A, 0xA1, 0x66, 0x9D, 0x0D, 0x71, 0x5B, 0x1A, 0xB7, 0x2D, 0xA4, 0x07, 0x65, 0x33, 0x06, 0xF5, 0x67, 0xCF, 0xA8, 0x12, 0xDE, 0x5F, 0x3F, 0x35, 0x13, 0x6F, 0x02, 0x6B, 0xD1, 0xA6, 0x1D, 0xC7, 0x5A, 0x40, 0xB3, 0xF8, 0x90, 0xA5, 0x9B, 0x94, 0xA0, 0x00, 0x60, 0x68, 0x50, 0xDA, 0x43, 0x38, 0x7B, 0x37, 0x4F, 0xF4, 0x58, 0xC5, 0x64, 0x22, 0x3D, 0xC9, 0xFC, 0x0A, 0x3A, 0xBA, 0x78, 0x6A, 0xFA, 0x5C, 0x8C, 0xE0, 0x77, 0x88, 0x41, 0xCD, 0x51, 0x9E, 0xA3, 0x4C, 0x1F, 0xCA, 0x16, 0x6E, 0x28, 0xF1, 0xFE, 0x8E, 0x99, 0xC8, 0xFB, 0x19, 0x7E, 0x7F, 0x45, 0x4D, 0xE4, 0xDF, 0x75, 0x57, 0x6D, 0x2F, 0xBB, 0x46, 0xE3, 0xEA, 0xDB, 0x53, 0x34, 0x36, 0x80, 0xEF, 0xF7, 0x7C, 0x1C, 0xB0, 0x9C, 0x47, 0x62, 0xB2, 0xB5, 0x89, 0x17, 0x09, 0xCE, 0xC6, 0xC1, 0x44, 0xCB, 0x63, 0x8B, 0xD6, 0x84, 0xB4, 0xEE, 0xF3, 0x55, 0x8F, 0xD4, 0x49, 0x3E, 0x2B, 0x96, 0xE8, 0xFD, 0x04, 0x8D, 0x52, 0xBC, 0x93, 0x70, 0xAB, 0xE9, 0x4E, 0xEB, 0x2E, 0x76, 0xA9, 0x86, 0xCC, 0xD3, 0xC4, 0xAF, 0x39, 0x2C, 0xF2, 0x4B, 0xAD, 0x72, 0x5D, 0xBE, 0xEC, 0x27, 0xC0, 0x15, 0x03, 0x24, 0xB6, 0x7D, 0x3B, 0x11, 0xB8, 0x25, 0xDD, 0x2F, 0xFB, 0x06, 0xB1, 0x5B, 0xF2, 0xA5, 0x8C, 0xC9, 0xCA, 0xC7, 0x15, 0xB3, 0xFC, 0x7C, 0xEB, 0xDC, 0x50, 0x91, 0x83, 0x80, 0x82, 0x53, 0xD3, 0xE4, 0xD9, 0x73, 0x64, 0x27, 0xC2, 0xA0, 0x67, 0xEE, 0x54, 0x0D, 0xAA, 0x77, 0x97, 0x85, 0xC5, 0x75, 0x23, 0xA7, 0x37, 0x01, 0x19, 0xD1, 0x79, 0xF8, 0x51, 0xA9, 0x49, 0x3A, 0xE9, 0xF7, 0xF0, 0x5C, 0xD4, 0x74, 0x1A, 0xB9, 0x1D, 0x94, 0x28, 0x13, 0xF4, 0x0A, 0x90, 0x6C, 0xFA, 0x95, 0x70, 0x3B, 0x9F, 0xE3, 0xE2, 0x4E, 0x04, 0xBC, 0xA3, 0x21, 0xD2, 0x5E, 0xDB, 0x30, 0x44, 0x2C, 0x76, 0xE1, 0x3C, 0x69, 0x1C, 0xC0, 0x4F, 0x4B, 0x0B, 0x9A, 0xFD, 0x6F, 0xD8, 0x66, 0xB7, 0x7E, 0x17, 0x25, 0xC3, 0xC8, 0xF3, 0xDE, 0x96, 0x3E, 0x62, 0xFF, 0xDF, 0x4C, 0x2D, 0x10, 0xE8, 0x46, 0xF6, 0xCD, 0x24, 0xE6, 0xC1, 0x61, 0x8F, 0x4A, 0x8B, 0x5F, 0x7A, 0xEA, 0x65, 0x86, 0x31, 0x20, 0xD5, 0x71, 0xF1, 0x48, 0xBE, 0x40, 0x0E, 0x39, 0x43, 0x07, 0x9B, 0x68, 0xCC, 0x3F, 0x60, 0x2A, 0xBD, 0x36, 0xB5, 0x56, 0x42, 0xCE, 0x72, 0x41, 0x45, 0x7F, 0x7B, 0x9E, 0x03, 0x09, 0x98, 0x9D, 0x00, 0xD6, 0x99, 0x1B, 0xB0, 0x5D, 0x6D, 0x63, 0xC6, 0xC4, 0x1E, 0x84, 0xB6, 0x0F, 0x11, 0xAC, 0xE5, 0xAF, 0xB8, 0xBF, 0x3D, 0xAE, 0x55, 0xA4, 0xB4, 0x18, 0x32, 0x1F, 0xF9, 0x93, 0x81, 0x2E, 0xEF, 0x05, 0x22, 0x14, 0x26, 0x87, 0xED, 0xFE, 0x8D, 0xEC, 0xB2, 0xCF, 0x35, 0xCB, 0xE7, 0x6E, 0x5A, 0x7D, 0x29, 0x08, 0x12, 0x52, 0xA1, 0x59, 0x58, 0x9C, 0xD0, 0x2B, 0xA2, 0xBB, 0x4D, 0xA6, 0x88, 0xAB, 0x6A, 0x33, 0xA8, 0x8A, 0x02, 0xAD, 0x8E, 0x16, 0x89, 0xD7, 0x34, 0xE0, 0xBA, 0xF5, 0x38, 0xDA, 0x92, 0x78, 0x6B, 0x47, 0x57, 0x0C, 0x75, 0xBD, 0x5C, 0xFB, 0xC1, 0xAB, 0x47, 0x48, 0x72, 0x0F, 0x46, 0x10, 0x3C, 0xEA, 0xCD, 0x2E, 0xC0, 0x92, 0x02, 0x1D, 0x6F, 0xA0, 0xCC, 0xAC, 0x50, 0x52, 0xD5, 0x0B, 0xDD, 0x06, 0x21, 0xD0, 0x3B, 0xBB, 0xC3, 0xB5, 0xE5, 0x89, 0xB8, 0x1B, 0x1A, 0xDC, 0x3F, 0x6E, 0xDE, 0x9F, 0x39, 0x68, 0xB2, 0x7C, 0x24, 0xA8, 0x64, 0xFE, 0x4F, 0xCE, 0xCF, 0xF1, 0x5D, 0x28, 0xF6, 0xF3, 0xFD, 0x29, 0xB6, 0xA7, 0x8C, 0xA5, 0x49, 0xEB, 0x9C, 0xEE, 0x1C, 0xC4, 0xBA, 0xD7, 0x6A, 0x65, 0x43, 0x6D, 0xC6, 0x8F, 0x7A, 0xD8, 0x7F, 0x96, 0x63, 0x36, 0xF2, 0xDF, 0x62, 0xB0, 0xAA, 0xE1, 0x69, 0x7B, 0x6C, 0x45, 0x3D, 0xB4, 0x51, 0x22, 0x7D, 0x58, 0xD9, 0x60, 0x56, 0xC2, 0x5F, 0x41, 0x01, 0xFF, 0x54, 0x07, 0xA6, 0xED, 0x20, 0x34, 0x26, 0xC8, 0x94, 0x13, 0x4C, 0xD4, 0x12, 0x25, 0x9E, 0x80, 0xB7, 0x66, 0x31, 0x30, 0x0C, 0x40, 0x08, 0xC9, 0xE6, 0xF4, 0x8E, 0xC5, 0x82, 0x71, 0x76, 0x7E, 0x55, 0xEF, 0xE9, 0xEC, 0x19, 0x98, 0x09, 0xD6, 0xB1, 0xDA, 0x5E, 0xBC, 0xD2, 0x03, 0x74, 0x86, 0x0A, 0x5B, 0x17, 0x53, 0x79, 0x2C, 0xDB, 0x0E, 0x78, 0x04, 0x5A, 0xF9, 0x9D, 0x85, 0x8B, 0x83, 0xD1, 0x4D, 0xA2, 0x27, 0xB3, 0x14, 0x84, 0xAD, 0x61, 0xAE, 0x15, 0x90, 0x95, 0x1E, 0xAF, 0x6B, 0x23, 0xE4, 0x16, 0x91, 0x2F, 0x99, 0xFA, 0x00, 0x1F, 0x33, 0xCA, 0xE2, 0x97, 0x2A, 0x67, 0xA9, 0x0D, 0xE7, 0x2B, 0x4A, 0x44, 0x87, 0x2D, 0x42, 0x9B, 0x32, 0x8A, 0x3E, 0xF5, 0xD3, 0x8D, 0x93, 0x18, 0x81, 0x37, 0x88, 0xFC, 0x70, 0xF7, 0xC7, 0xA1, 0x38, 0xCB, 0x4E, 0xA4, 0xA3, 0x57, 0x11, 0xB9, 0x35, 0x73, 0xE8, 0xE0, 0xE3, 0x59, 0x3A, 0x77, 0xBE, 0xF0, 0x05, 0x4B, 0xBF, 0x9A, 0xF8 };
        public static readonly byte[] BlbShiftRow = new byte[48] { 0x05, 0x0A, 0x03, 0x08, 0x0F, 0x02, 0x07, 0x09, 0x00, 0x06, 0x0E, 0x0B, 0x0C, 0x01, 0x04, 0x0D, 0x05, 0x0E, 0x08, 0x06, 0x01, 0x0C, 0x07, 0x09, 0x00, 0x0F, 0x03, 0x0B, 0x04, 0x0D, 0x02, 0x0A, 0x04, 0x0F, 0x0D, 0x05, 0x0C, 0x08, 0x02, 0x09, 0x0B, 0x01, 0x07, 0x03, 0x0A, 0x00, 0x06, 0x0E };
        public static readonly byte[] BlbKey = new byte[8] { 0xA9, 0x85, 0x57, 0x4D, 0x8B, 0xF9, 0x81, 0x33 };
        public static readonly byte[] BlbMul = new byte[8] { 0xC8, 0x73, 0xBF, 0x25, 0xD9, 0x9C, 0x7E, 0x6C };
    }

    public static class BlbUtils
    {
        public static void Decrypt(byte[] header, Span<byte> buffer)
        {
            buffer = buffer[..Math.Min(128, buffer.Length)];
            Debug.Assert(header.Length == 0x10, $"Invalid header size: {header.Length} != 16");
            // Initial XOR step
            for (int i = 0; i < header.Length; i++)
            {
                buffer[i] ^= header[i];
            }

            // This is a modified AES implementation. Calling the Encrypt() method is intentional.
            BlbAES.Encrypt(buffer.Slice(0, 16).ToArray(), header).CopyTo(buffer);

            if (buffer.Length > 16)
            {
                // The RC4 call only modified bytes after the first 16, though it uses those early bytes to seed its key schedule.
                RC4(buffer);
            }

            Descramble(buffer.Slice(0, 16));
        }

        private static int GF256Mul(int a, int b) => (a == 0 || b == 0) ? 0 : CryptoHelper.GF256Exp[(CryptoHelper.GF256Log[a] + CryptoHelper.GF256Log[b]) % 0xFF];

        // Same as in MhyFile.cs, but with other keys
        private static void Descramble(Span<byte> buf)
        {
            byte[] vector = new byte[buf.Length];
            for (int i = 0; i < 3; i++)
            {
                for (int j = 0; j < buf.Length; j++)
                {
                    int k = BlbKeys.BlbShiftRow[(2 - i) * 0x10 + j];
                    int idx = j % 8;
                    vector[j] = (byte)(BlbKeys.BlbKey[idx] ^ BlbKeys.BlbSBox[(j % 4 * 0x100) | GF256Mul(BlbKeys.BlbMul[idx], buf[k % buf.Length])]);
                }
                vector.AsSpan(0, buf.Length).CopyTo(buf);
            }
        }

        private static void RC4(Span<byte> buf)
        {
            byte[] S = new byte[256];
            BlbKeys.BlbRC4Key.CopyTo(S, 0);
            byte[] T = new byte[256];
            int i = 0;
            for (i = 0; i < 256; i += 2)
            {
                T[i] = buf[i & 6];
                T[i + 1] = buf[(i + 1) & 7];
            }

            int j = 0;
            for (i = 0; i < 256; i++)
            {
                j = (j + S[i] + T[i]) % 256;
                ref byte reference = ref S[j];
                ref byte reference2 = ref S[i];
                byte b = S[i];
                byte b2 = S[j];
                reference = b;
                reference2 = b2;
            }
            i = (j = 0);
            for (int iteration = 0; iteration < buf.Length - 0x10; iteration++)
            {
                i = (i + 1) % 256;
                j = (j + S[i]) % 256;
                ref byte reference = ref S[j];
                ref byte reference3 = ref S[i];
                byte b2 = S[i];
                byte b = S[j];
                reference = b2;
                reference3 = b;
                uint K = S[(S[j] + S[i]) % 256];
                switch (buf[(i % 8) + 8] % 3)
                {
                    case 0:
                        buf[iteration + 0x10] ^= Convert.ToByte(K);
                        break;
                    case 1:
                        buf[iteration + 0x10] -= Convert.ToByte(K);
                        break;
                    case 2:
                        buf[iteration + 0x10] += Convert.ToByte(K);
                        break;
                }
            }
        }
    }

    // Simple, thoroughly commented implementation of 128-bit AES / Rijndael using C#
    // Chris Hulbert - chris.hulbert@gmail.com - http://splinter.com.au/blog - http://github.com/chrishulbert/crypto
    // Note: This is not the same as implemented in AES.cs. This implementation uses a custom SBox, and has unique behavior for key expansion, xor round key, and sub bytes.
    internal static class BlbAES
    {
        #region AES Keys
        private static readonly byte[] shift_rows_table = { 0, 5, 10, 15, 4, 9, 14, 3, 8, 13, 2, 7, 12, 1, 6, 11 };
        private static readonly byte[] lookup_g2 = { 0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e, 0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e, 0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e, 0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 0x70, 0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e, 0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c, 0x8e, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e, 0xa0, 0xa2, 0xa4, 0xa6, 0xa8, 0xaa, 0xac, 0xae, 0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe, 0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce, 0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde, 0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee, 0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe, 0x1b, 0x19, 0x1f, 0x1d, 0x13, 0x11, 0x17, 0x15, 0x0b, 0x09, 0x0f, 0x0d, 0x03, 0x01, 0x07, 0x05, 0x3b, 0x39, 0x3f, 0x3d, 0x33, 0x31, 0x37, 0x35, 0x2b, 0x29, 0x2f, 0x2d, 0x23, 0x21, 0x27, 0x25, 0x5b, 0x59, 0x5f, 0x5d, 0x53, 0x51, 0x57, 0x55, 0x4b, 0x49, 0x4f, 0x4d, 0x43, 0x41, 0x47, 0x45, 0x7b, 0x79, 0x7f, 0x7d, 0x73, 0x71, 0x77, 0x75, 0x6b, 0x69, 0x6f, 0x6d, 0x63, 0x61, 0x67, 0x65, 0x9b, 0x99, 0x9f, 0x9d, 0x93, 0x91, 0x97, 0x95, 0x8b, 0x89, 0x8f, 0x8d, 0x83, 0x81, 0x87, 0x85, 0xbb, 0xb9, 0xbf, 0xbd, 0xb3, 0xb1, 0xb7, 0xb5, 0xab, 0xa9, 0xaf, 0xad, 0xa3, 0xa1, 0xa7, 0xa5, 0xdb, 0xd9, 0xdf, 0xdd, 0xd3, 0xd1, 0xd7, 0xd5, 0xcb, 0xc9, 0xcf, 0xcd, 0xc3, 0xc1, 0xc7, 0xc5, 0xfb, 0xf9, 0xff, 0xfd, 0xf3, 0xf1, 0xf7, 0xf5, 0xeb, 0xe9, 0xef, 0xed, 0xe3, 0xe1, 0xe7, 0xe5 };
        private static readonly byte[] lookup_g3 = { 0x00, 0x03, 0x06, 0x05, 0x0c, 0x0f, 0x0a, 0x09, 0x18, 0x1b, 0x1e, 0x1d, 0x14, 0x17, 0x12, 0x11, 0x30, 0x33, 0x36, 0x35, 0x3c, 0x3f, 0x3a, 0x39, 0x28, 0x2b, 0x2e, 0x2d, 0x24, 0x27, 0x22, 0x21, 0x60, 0x63, 0x66, 0x65, 0x6c, 0x6f, 0x6a, 0x69, 0x78, 0x7b, 0x7e, 0x7d, 0x74, 0x77, 0x72, 0x71, 0x50, 0x53, 0x56, 0x55, 0x5c, 0x5f, 0x5a, 0x59, 0x48, 0x4b, 0x4e, 0x4d, 0x44, 0x47, 0x42, 0x41, 0xc0, 0xc3, 0xc6, 0xc5, 0xcc, 0xcf, 0xca, 0xc9, 0xd8, 0xdb, 0xde, 0xdd, 0xd4, 0xd7, 0xd2, 0xd1, 0xf0, 0xf3, 0xf6, 0xf5, 0xfc, 0xff, 0xfa, 0xf9, 0xe8, 0xeb, 0xee, 0xed, 0xe4, 0xe7, 0xe2, 0xe1, 0xa0, 0xa3, 0xa6, 0xa5, 0xac, 0xaf, 0xaa, 0xa9, 0xb8, 0xbb, 0xbe, 0xbd, 0xb4, 0xb7, 0xb2, 0xb1, 0x90, 0x93, 0x96, 0x95, 0x9c, 0x9f, 0x9a, 0x99, 0x88, 0x8b, 0x8e, 0x8d, 0x84, 0x87, 0x82, 0x81, 0x9b, 0x98, 0x9d, 0x9e, 0x97, 0x94, 0x91, 0x92, 0x83, 0x80, 0x85, 0x86, 0x8f, 0x8c, 0x89, 0x8a, 0xab, 0xa8, 0xad, 0xae, 0xa7, 0xa4, 0xa1, 0xa2, 0xb3, 0xb0, 0xb5, 0xb6, 0xbf, 0xbc, 0xb9, 0xba, 0xfb, 0xf8, 0xfd, 0xfe, 0xf7, 0xf4, 0xf1, 0xf2, 0xe3, 0xe0, 0xe5, 0xe6, 0xef, 0xec, 0xe9, 0xea, 0xcb, 0xc8, 0xcd, 0xce, 0xc7, 0xc4, 0xc1, 0xc2, 0xd3, 0xd0, 0xd5, 0xd6, 0xdf, 0xdc, 0xd9, 0xda, 0x5b, 0x58, 0x5d, 0x5e, 0x57, 0x54, 0x51, 0x52, 0x43, 0x40, 0x45, 0x46, 0x4f, 0x4c, 0x49, 0x4a, 0x6b, 0x68, 0x6d, 0x6e, 0x67, 0x64, 0x61, 0x62, 0x73, 0x70, 0x75, 0x76, 0x7f, 0x7c, 0x79, 0x7a, 0x3b, 0x38, 0x3d, 0x3e, 0x37, 0x34, 0x31, 0x32, 0x23, 0x20, 0x25, 0x26, 0x2f, 0x2c, 0x29, 0x2a, 0x0b, 0x08, 0x0d, 0x0e, 0x07, 0x04, 0x01, 0x02, 0x13, 0x10, 0x15, 0x16, 0x1f, 0x1c, 0x19, 0x1a };
        private static readonly byte[] power_schedule = { 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36 };
        #endregion

        // Note: completely bespoke implementation
        public static byte[] Expand(byte[] key)
        {
            byte[] keys = new byte[176];

            for (int i = 0; i < 16; i++)
            {
                keys[i] = key[BlbKeys.BlbAESShift[i]];
            }

            int offset = 0x1f;
            for (int round = 0; round < 10; round++)
            {
                byte a = BlbKeys.BlbAESSBox[keys[offset - 0x14]];
                byte b = BlbKeys.BlbAESSBox[keys[offset - 0x10]];
                byte c = (byte)(BlbKeys.BlbAESSBox[keys[offset - 0x18]] ^ keys[offset - 0x18] ^ power_schedule[round] ^ keys[offset - 0x1f]);
                byte d = BlbKeys.BlbAESSBox[keys[offset - 0x1c]];
                byte temp = 0;

                keys[offset - 0xf] = c;
                temp = (byte)(a ^ keys[offset - 0x14] ^ keys[offset - 0x1b]);
                keys[offset - 0xb] = temp;
                a = (byte)(b ^ keys[offset - 0x10] ^ keys[offset - 0x17]);
                keys[offset - 7] = a;
                b = (byte)(d ^ keys[offset - 0x1c] ^ keys[offset - 0x13]);
                keys[offset - 3] = b;
                c = (byte)(c ^ keys[offset - 0x1e]);
                keys[offset - 0xe] = c;
                temp = (byte)(temp ^ keys[offset - 0x1a]);
                keys[offset - 10] = temp;
                a = (byte)(a ^ keys[offset - 0x16]);
                keys[offset - 6] = a;
                b = (byte)(b ^ keys[offset - 0x12]);
                keys[offset - 2] = b;
                c = (byte)(c ^ keys[offset - 0x1d]);
                keys[offset - 0xd] = c;
                temp = (byte)(temp ^ keys[offset - 0x19]);
                keys[offset - 9] = temp;
                a = (byte)(a ^ keys[offset - 0x15]);
                keys[offset - 5] = a;
                b = (byte)(b ^ keys[offset - 0x11]);
                keys[offset - 1] = b;
                keys[offset - 0xc] = (byte)(c ^ keys[offset - 0x1c]);
                keys[offset - 8] = (byte)(temp ^ keys[offset - 0x18]);
                keys[offset - 4] = (byte)(a ^ keys[offset - 0x14]);
                keys[offset] = (byte)(b ^ keys[offset - 0x10]);

                offset += 0x10;
            }

            return keys;
        }

        public static byte[] Encrypt(byte[] m, byte[] k)
        {
            // Key expansion
            byte[] keys = Expand(k);

            // First Round
            byte[] c = new byte[16];
            Array.Copy(m, c, 16);
            XorRoundKey(c, keys, 0);

            // Middle rounds
            for (int i = 0; i < 9; i++)
            {
                SubBytes(c);
                ShiftRows(c);
                MixCols(c);
                XorRoundKey(c, keys, i + 1);
            }

            // Final Round
            SubBytes(c);
            ShiftRows(c);
            XorRoundKey(c, keys, 10);

            return c;
        }

        private static void SubBytes(byte[] a)
        {
            for (int i = 0; i < a.Length; i++)
                // Note: we xor the data with the substitution. This is different from the ref impl
                a[i] ^= BlbKeys.BlbAESSBox[a[i]];
        }

        private static void XorRoundKey(byte[] state, byte[] keys, int round)
        {
            for (int i = 0; i < 4; i++)
            {
                for (int j = 0; j < 4; j++)
                {
                    state[i * 4 + j] ^= keys[i + j * 4 + round * 16];
                }
            }
        }

        private static void ShiftRows(byte[] state)
        {
            byte[] temp = new byte[16];
            Array.Copy(state, temp, 16);
            for (int i = 0; i < 16; i++)
                state[i] = temp[shift_rows_table[i]];
        }

        private static void MixCol(byte[] state, int off)
        {
            byte a0 = state[off + 0];
            byte a1 = state[off + 1];
            byte a2 = state[off + 2];
            byte a3 = state[off + 3];
            state[off + 0] = (byte)(lookup_g2[a0] ^ lookup_g3[a1] ^ a2 ^ a3);
            state[off + 1] = (byte)(lookup_g2[a1] ^ lookup_g3[a2] ^ a3 ^ a0);
            state[off + 2] = (byte)(lookup_g2[a2] ^ lookup_g3[a3] ^ a0 ^ a1);
            state[off + 3] = (byte)(lookup_g2[a3] ^ lookup_g3[a0] ^ a1 ^ a2);
        }

        private static void MixCols(byte[] state)
        {
            MixCol(state, 0);
            MixCol(state, 4);
            MixCol(state, 8);
            MixCol(state, 12);
        }
    }
}